#! /usr/bin/env node
'use strict'

const fs = require('fs');

const template = fs.readFileSync('./template.js', 'utf-8');

const verb = process.argv[2]; //'fetch';
const noun = process.argv[3]; //'bone';

if(2 == process.argv.length) {
  const self = './' + process.argv[1].split('/').reverse()[0];
  process.stdout.write(
`
  Usage:
  
    ${self} verb noun

  For example, “fetch” and “bone” will result in a fetchBone(bone) 
  action creator and a BONE_FETCH_RECEIPT constant, among others.
  Typically you’d pipe stdout to your clipboard and paste into 
  where your actions are stored.

    ${self} fetch bone | pbcopy # OS X
    ${self} fetch bone >> my-actions.js
    
`
  );
  process.exit(0);
}

if(!verb || !verb.length) { 
  process.stderr.write('You must specify a verb as the first argument\n'); 
  process.exit(1); 
}
if(!noun || !noun.length) { 
  process.stderr.write('You must specify a noun as the second argument\n'); 
  process.exit(1); 
}

function matchCase(match, replacement) {
  function isUpperCase(str) { return Array.from(str).every(chr => chr === chr.toUpperCase()); }
  function isLowerCase(str) { return Array.from(str).every(chr => chr === chr.toLowerCase()); }
  function isTitleCase(str) { return (/[A-Z][a-z]+/).test(str); }
  
  if(isUpperCase(match)) { return replacement.toUpperCase(); }
  if(isLowerCase(match)) { return replacement.toLowerCase(); }
  if(isTitleCase(match)) { return replacement.charAt(0).toUpperCase() + replacement.slice(1); }
  throw new TypeError(`${match} is not a valid input`);
}

let out = template
  .replace(/\$noun/gi, (match) => matchCase(match, noun))
  .replace(/\$verb/gi, (match) => matchCase(match, verb));

process.stdout.write(out);
